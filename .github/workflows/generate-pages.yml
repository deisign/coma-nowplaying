// update-log.js
// –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 2000

const fs = require('fs').promises;
const path = require('path');

// –í Node 18+ fetch –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–º–µ–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É node-fetch –Ω–µ –Ω—É–∂–µ–Ω
// const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥
const JSON_STORE     = path.resolve(__dirname, 'tracks-log.json');
const ITEMS_PER_PAGE = 2000;
const PAGE_PREFIX    = 'tracks-log-page';
const FIRST_PAGE     = 'tracks-log.html';

const SUPABASE_URL  = process.env.SUPABASE_URL;
const SUPABASE_KEY  = process.env.SUPABASE_KEY;
if (!SUPABASE_URL || !SUPABASE_KEY) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã SUPABASE_URL/SUPABASE_KEY');
  process.exit(1);
}

;(async () => {
  // 1) –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ª–æ–≥–∞
  let log = [];
  try {
    log = JSON.parse(await fs.readFile(JSON_STORE, 'utf8'));
    console.log(`‚ÑπÔ∏è Loaded ${log.length} existing records`);
  } catch {
    console.log('‚ÑπÔ∏è No JSON store found, starting fresh');
  }

  // 2) –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –í–°–ï —Ç—Ä–µ–∫–∏ –∏–∑ Supabase
  console.log('‚è≥ Fetching current tracks from Supabase...');
  const url = `${SUPABASE_URL}/rest/v1/tracks?select=id,artist,title,album,date&order=id.asc`;
  const res = await fetch(url, {
    headers: { apikey: SUPABASE_KEY, Authorization: `Bearer ${SUPABASE_KEY}` },
  });
  if (!res.ok) {
    const err = await res.text();
    throw new Error(`Supabase error ${res.status}: ${err}`);
  }
  const current = await res.json();
  console.log(`‚úÖ Fetched ${current.length} records from Supabase`);

  // 3) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö
  const existingIds = new Set(log.map(r => r.id));
  const newRec = current.filter(r => !existingIds.has(r.id));
  console.log(`üå± New records to add: ${newRec.length}`);
  log = log.concat(newRec);

  // 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ
  await fs.writeFile(JSON_STORE, JSON.stringify(log, null, 2), 'utf8');
  console.log(`üíæ Updated ${JSON_STORE}, total: ${log.length}`);

  // 5) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö HTML
  const totalPages = Math.ceil(log.length / ITEMS_PER_PAGE);
  for (let page = 1; page <= totalPages; page++) {
    const slice = log.slice((page-1)*ITEMS_PER_PAGE, page*ITEMS_PER_PAGE);
    const itemsHtml = slice.map(r =>
      `<li>${r.id}. <strong>${r.artist}</strong> ‚Äî ${r.title}` +
      (r.album ? ` [${r.album}]` : '') +
      (r.date  ? ` (${r.date})`   : '') +
      `</li>`
    ).join('\n    ');

    const nav = [];
    if (page > 1) {
      const prev = page===2 ? FIRST_PAGE : `${PAGE_PREFIX}${page-1}.html`;
      nav.push(`<a href="${prev}">‚Üê –ù–∞–∑–∞–¥</a>`);
    }
    if (page < totalPages) {
      nav.push(`<a href="${PAGE_PREFIX}${page+1}.html">–í–ø–µ—Ä—ë–¥ ‚Üí</a>`);
    }

    const html = `<!DOCTYPE html>
<html>
<head><meta charset="utf-8">
  <title>Tracks log ‚Äî page ${page}/${totalPages}</title>
</head>
<body>
  <ul>
    ${itemsHtml}
  </ul>
  <div>${nav.join(' | ')}</div>
</body>
</html>`;

    const outFile = page===1 ? FIRST_PAGE : `${PAGE_PREFIX}${page}.html`;
    await fs.writeFile(outFile, html, 'utf8');
    console.log(`‚úÖ ${outFile} (${slice.length} items)`);
  }

  console.log('üéâ All pages regenerated');
})();
