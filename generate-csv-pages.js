// generate-csv-pages.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∞ –∏–∑ CSV (–ø–æ 2000 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
// –£—Å—Ç–∞–Ω–æ–≤–∏: npm install csv-parse

const fs = require('fs').promises;
const path = require('path');
const { parse } = require('csv-parse/sync');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const CSV_FILE       = path.resolve(__dirname, 'tracks_clean.csv'); // –æ—á–∏—â–µ–Ω–Ω—ã–π CSV
const ITEMS_PER_PAGE = 2000;                                       // 2000 –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
const PAGE_PREFIX    = 'tracks-log-page';
const FIRST_PAGE     = 'tracks-log.html';

(async () => {
  try {
    // 1) –ß–∏—Ç–∞–µ–º CSV
    const csvContent = await fs.readFile(CSV_FILE, 'utf8');
    const rawRecords = parse(csvContent, { columns: true, skip_empty_lines: true });
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è (—É—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ CSV)
    const records = rawRecords.map(r => ({
      id:     r.id     ?? r.ID   ?? r.Id,
      artist: r.Artist ?? r.artist,
      title:  r.Title  ?? r.title,
      album:  r.Album  ?? r.album,
      date:   r.Date   ?? r.date
    }));
    console.log(`üé∂ Loaded ${records.length} records from CSV`);

    // 2) –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(records.length / ITEMS_PER_PAGE);

    // 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    for (let page = 1; page <= totalPages; page++) {
      const start = (page - 1) * ITEMS_PER_PAGE;
      const slice = records.slice(start, start + ITEMS_PER_PAGE);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ <li>
      const itemsHtml = slice.map(r => {
        let line = `<li>`;
        if (r.id)     line += `${r.id}. `;
        line += `<strong>${r.artist}</strong> ‚Äî ${r.title}`;
        if (r.album)  line += ` [${r.album}]`;
        if (r.date)   line += ` (${r.date})`;
        line += `</li>`;
        return line;
      }).join('\n    ');

      // –ù–∞–≤–∏–≥–∞—Ü–∏—è
      const nav = [];
      if (page > 1) {
        const prev = page === 2 ? FIRST_PAGE : `${PAGE_PREFIX}${page-1}.html`;
        nav.push(`<a href="${prev}">‚Üê –ù–∞–∑–∞–¥</a>`);
      }
      if (page < totalPages) {
        nav.push(`<a href="${PAGE_PREFIX}${page+1}.html">–í–ø–µ—Ä—ë–¥ ‚Üí</a>`);
      }

      // –°–æ—Å—Ç–∞–≤–ª—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const html = `<!DOCTYPE html>
<html>
<head><meta charset="utf-8"><title>Tracks log ‚Äî page ${page}/${totalPages}</title></head>
<body>
  <ul>
    ${itemsHtml}
  </ul>
  <div>${nav.join(' | ')}</div>
</body>
</html>`;

      // –ü–∏—à–µ–º —Ñ–∞–π–ª
      const outFile = page === 1 ? FIRST_PAGE : `${PAGE_PREFIX}${page}.html`;
      await fs.writeFile(outFile, html, 'utf8');
      console.log(`‚úÖ Generated ${outFile} (${slice.length} items)`);
    }

    console.log('üéâ All pages generated');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
})();
