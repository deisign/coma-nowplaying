document.addEventListener("DOMContentLoaded", async () => {
    const container = document.getElementById("now-playing-container");
    const apiUrl = "https://public.radio.co/stations/s4360dbc20/history";
    const streamUrl = "https://stream.radio.co/s4360dbc20/listen";

    let currentTrack = null;
    let audioElement = document.createElement("audio");

    // –°–æ–∑–¥–∞—ë–º –ø–ª–µ–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑
    audioElement.controls = true;
    audioElement.src = streamUrl;
    audioElement.autoplay = true;
    audioElement.style.width = "100%";

    console.log("üöÄ –í–µ–±–ª–µ—Ç Now Playing –∑–∞–ø—É—â–µ–Ω!");
    console.log("üîó –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API:", apiUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º
    let nowPlayingContainer = document.querySelector(".now-playing-container");
    if (!nowPlayingContainer) {
        nowPlayingContainer = document.createElement("div");
        nowPlayingContainer.className = "now-playing-container";
        container.appendChild(nowPlayingContainer);
    }

    nowPlayingContainer.innerHTML = `
        <div class="now-playing">
            <img class="album-art" src="" alt="–û–±–ª–æ–∂–∫–∞ –∞–ª—å–±–æ–º–∞">
            <div class="track-info">
                <h3 class="track-title">–ó–∞–≥—Ä—É–∑–∫–∞...</h3>
                <p class="track-artist">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                <a href="#" target="_blank" class="spotify-button">üîé –ù–∞–π—Ç–∏ –≤ Spotify</a>
            </div>
        </div>
    `;

    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    if (!nowPlayingContainer.querySelector("audio")) {
        nowPlayingContainer.appendChild(audioElement);
    }

    async function fetchNowPlaying() {
        try {
            const response = await fetch(apiUrl, {
                method: "GET",
                headers: {
                    "Accept": "application/json",
                    "User-Agent": "Mozilla/5.0"
                }
            });

            if (!response.ok) {
                throw new Error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status}`);
            }

            const data = await response.json();
            console.log("‚úÖ API –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ:", data);

            if (!data.tracks || data.tracks.length === 0) {
                return null;
            }

            return data.tracks[0];

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            return null;
        }
    }

    function parseTrackTitle(title) {
        if (!title.includes(" - ")) return { artist: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", title };
        const [artist, track] = title.split(" - ", 2);
        return { artist, title: track };
    }

    function getSpotifySearchLink(artist, track) {
        const query = encodeURIComponent(`${artist} ${track}`);
        return `https://open.spotify.com/search/${query}`;
    }

    async function updateNowPlaying() {
        const track = await fetchNowPlaying();

        if (track) {
            const parsed = parseTrackTitle(track.title);
            console.log("üéµ –û–±–Ω–æ–≤–ª—è–µ–º HTML: –¢—Ä–µ–∫ -", parsed.title, "–æ—Ç", parsed.artist);

            const spotifyLink = getSpotifySearchLink(parsed.artist, parsed.title);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
            nowPlayingContainer.querySelector(".album-art").src = track.artwork_url || "https://via.placeholder.com/150";
            nowPlayingContainer.querySelector(".track-title").textContent = parsed.title;
            nowPlayingContainer.querySelector(".track-artist").textContent = parsed.artist;
            nowPlayingContainer.querySelector(".spotify-button").href = spotifyLink;

            currentTrack = parsed.title;
        }
    }

    updateNowPlaying();
    setInterval(updateNowPlaying, 1000);
});
