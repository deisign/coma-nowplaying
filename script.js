document.addEventListener("DOMContentLoaded", async () => {
    const container = document.getElementById("now-playing-container");
    const apiUrl = "https://public.radio.co/stations/s4360dbc20/history";
    const streamUrl = "https://stream.radio.co/s4360dbc20/listen";

    let currentTrack = null; // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
    let audioElement = null; // –û—Ç–¥–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏–º –ø–ª–µ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–ª—Å—è

    console.log("üöÄ –í–µ–±–ª–µ—Ç Now Playing –∑–∞–ø—É—â–µ–Ω!");
    console.log("üîó –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API:", apiUrl);

    async function fetchNowPlaying() {
        try {
            console.time("‚è≥ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API");

            const response = await fetch(apiUrl, {
                method: "GET",
                headers: {
                    "Accept": "application/json",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
                }
            });

            console.timeEnd("‚è≥ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ API");
            console.log("üì° HTTP-—Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);

            if (!response.ok) {
                throw new Error(`‚ùå –û—à–∏–±–∫–∞ HTTP: ${response.status} - ${response.statusText}`);
            }

            const data = await response.json();
            console.log("‚úÖ API –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ:", data);

            if (!data.tracks || data.tracks.length === 0) {
                console.warn("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–∫–æ–≤.");
                return null;
            }

            const nowPlayingTrack = data.tracks[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
            console.log("üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:", nowPlayingTrack);

            return nowPlayingTrack;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            container.innerHTML = `<p style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞.</p>`;
            return null;
        }
    }

    function parseTrackTitle(title) {
        if (!title.includes(" - ")) return { artist: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", title };
        const [artist, track] = title.split(" - ", 2);
        return { artist, title: track };
    }

    async function updateNowPlaying() {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ...");
        const track = await fetchNowPlaying();

        if (track) {
            const parsed = parseTrackTitle(track.title);

            console.log("üéµ –û–±–Ω–æ–≤–ª—è–µ–º HTML: –¢—Ä–µ–∫ -", parsed.title, "–æ—Ç", parsed.artist);
            console.log("üñº –û–±–ª–æ–∂–∫–∞ –∞–ª—å–±–æ–º–∞:", track.artwork_url);

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Äì —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if (!audioElement) {
                audioElement = document.createElement("audio");
                audioElement.controls = true;
                audioElement.src = streamUrl;
                audioElement.autoplay = true;
                audioElement.style.width = "100%"; // –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–ª–µ–µ—Ä –ø–æ —à–∏—Ä–∏–Ω–µ
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–µ —Ç—Ä–æ–≥–∞—è –ø–ª–µ–µ—Ä
            container.innerHTML = `
                <div class="now-playing">
                    <img src="${track.artwork_url || 'https://via.placeholder.com/100'}" alt="–û–±–ª–æ–∂–∫–∞ –∞–ª—å–±–æ–º–∞">
                    <div class="track-info">
                        <h3>${parsed.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫'}</h3>
                        <p>${parsed.artist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}</p>
                    </div>
                </div>
            `;

            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–µ–µ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
            if (!container.querySelector("audio")) {
                container.appendChild(audioElement);
            }

            console.log("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω.");
            currentTrack = parsed.title;
        } else {
            console.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–µ–∫–µ –Ω–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.");
            container.innerHTML = `<p style="color: yellow;">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.</p>`;
        }
    }

    updateNowPlaying();
    setInterval(updateNowPlaying, 30000);
});
